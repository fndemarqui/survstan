// Generated by rstantools.  Do not edit by hand.

/*
    survstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    survstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with survstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_survreg_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 475> locations_array__ =
  {" (found before start of program)",
  " (in 'survreg', line 397, column 2 to column 30)",
  " (in 'survreg', line 398, column 2 to column 34)",
  " (in 'survreg', line 399, column 2 to column 51)",
  " (in 'survreg', line 400, column 2 to column 51)",
  " (in 'survreg', line 401, column 2 to column 52)",
  " (in 'survreg', line 402, column 2 to column 53)",
  " (in 'survreg', line 403, column 2 to column 36)",
  " (in 'survreg', line 404, column 2 to column 52)",
  " (in 'survreg', line 405, column 2 to column 45)",
  " (in 'survreg', line 406, column 2 to column 41)",
  " (in 'survreg', line 409, column 9 to column 10)",
  " (in 'survreg', line 409, column 2 to column 15)",
  " (in 'survreg', line 410, column 9 to column 10)",
  " (in 'survreg', line 410, column 2 to column 14)",
  " (in 'survreg', line 411, column 9 to column 10)",
  " (in 'survreg', line 411, column 2 to column 19)",
  " (in 'survreg', line 412, column 9 to column 10)",
  " (in 'survreg', line 412, column 2 to column 17)",
  " (in 'survreg', line 413, column 9 to column 10)",
  " (in 'survreg', line 413, column 2 to column 18)",
  " (in 'survreg', line 414, column 9 to column 28)",
  " (in 'survreg', line 414, column 2 to column 34)",
  " (in 'survreg', line 415, column 9 to column 28)",
  " (in 'survreg', line 415, column 2 to column 32)",
  " (in 'survreg', line 416, column 9 to column 42)",
  " (in 'survreg', line 416, column 44 to column 45)",
  " (in 'survreg', line 416, column 2 to column 50)",
  " (in 'survreg', line 417, column 9 to column 42)",
  " (in 'survreg', line 417, column 44 to column 45)",
  " (in 'survreg', line 417, column 2 to column 50)",
  " (in 'survreg', line 418, column 2 to column 11)",
  " (in 'survreg', line 431, column 4 to column 24)",
  " (in 'survreg', line 433, column 6 to column 27)",
  " (in 'survreg', line 434, column 6 to column 21)",
  " (in 'survreg', line 432, column 19 to line 435, column 5)",
  " (in 'survreg', line 432, column 4 to line 435, column 5)",
  " (in 'survreg', line 430, column 7 to line 436, column 3)",
  " (in 'survreg', line 420, column 4 to column 25)",
  " (in 'survreg', line 426, column 8 to column 29)",
  " (in 'survreg', line 427, column 8 to column 25)",
  " (in 'survreg', line 425, column 11 to line 428, column 7)",
  " (in 'survreg', line 423, column 8 to column 29)",
  " (in 'survreg', line 424, column 8 to column 31)",
  " (in 'survreg', line 422, column 22 to line 425, column 7)",
  " (in 'survreg', line 422, column 6 to line 428, column 7)",
  " (in 'survreg', line 421, column 19 to line 429, column 5)",
  " (in 'survreg', line 421, column 4 to line 429, column 5)",
  " (in 'survreg', line 419, column 9 to line 430, column 3)",
  " (in 'survreg', line 419, column 2 to line 436, column 3)",
  " (in 'survreg', line 440, column 4 to column 24)",
  " (in 'survreg', line 439, column 7 to line 441, column 3)",
  " (in 'survreg', line 438, column 4 to column 13)",
  " (in 'survreg', line 437, column 50 to line 439, column 3)",
  " (in 'survreg', line 437, column 2 to line 441, column 3)",
  " (in 'survreg', line 445, column 4 to column 14)",
  " (in 'survreg', line 444, column 7 to line 446, column 3)",
  " (in 'survreg', line 443, column 4 to column 41)",
  " (in 'survreg', line 442, column 31 to line 444, column 3)",
  " (in 'survreg', line 442, column 2 to line 446, column 3)",
  " (in 'survreg', line 512, column 4 to column 41)",
  " (in 'survreg', line 513, column 4 to column 38)",
  " (in 'survreg', line 511, column 26 to line 514, column 3)",
  " (in 'survreg', line 511, column 8 to line 514, column 3)",
  " (in 'survreg', line 508, column 6 to column 39)",
  " (in 'survreg', line 509, column 6 to column 38)",
  " (in 'survreg', line 507, column 9 to line 510, column 5)",
  " (in 'survreg', line 501, column 10 to column 57)",
  " (in 'survreg', line 502, column 10 to column 65)",
  " (in 'survreg', line 500, column 21 to line 503, column 9)",
  " (in 'survreg', line 500, column 8 to line 503, column 9)",
  " (in 'survreg', line 499, column 19 to line 504, column 7)",
  " (in 'survreg', line 499, column 6 to line 504, column 7)",
  " (in 'survreg', line 505, column 6 to column 41)",
  " (in 'survreg', line 506, column 6 to column 39)",
  " (in 'survreg', line 498, column 23 to line 507, column 5)",
  " (in 'survreg', line 498, column 4 to line 510, column 5)",
  " (in 'survreg', line 497, column 26 to line 511, column 3)",
  " (in 'survreg', line 497, column 8 to line 514, column 3)",
  " (in 'survreg', line 494, column 10 to column 69)",
  " (in 'survreg', line 495, column 10 to column 71)",
  " (in 'survreg', line 493, column 17 to line 496, column 5)",
  " (in 'survreg', line 493, column 4 to line 496, column 5)",
  " (in 'survreg', line 492, column 26 to line 497, column 3)",
  " (in 'survreg', line 492, column 8 to line 514, column 3)",
  " (in 'survreg', line 489, column 10 to column 68)",
  " (in 'survreg', line 490, column 10 to column 70)",
  " (in 'survreg', line 488, column 17 to line 491, column 5)",
  " (in 'survreg', line 488, column 4 to line 491, column 5)",
  " (in 'survreg', line 487, column 25 to line 492, column 3)",
  " (in 'survreg', line 487, column 8 to line 514, column 3)",
  " (in 'survreg', line 484, column 10 to column 59)",
  " (in 'survreg', line 485, column 10 to column 61)",
  " (in 'survreg', line 483, column 17 to line 486, column 5)",
  " (in 'survreg', line 483, column 4 to line 486, column 5)",
  " (in 'survreg', line 482, column 25 to line 487, column 3)",
  " (in 'survreg', line 482, column 8 to line 514, column 3)",
  " (in 'survreg', line 479, column 10 to column 46)",
  " (in 'survreg', line 480, column 10 to column 48)",
  " (in 'survreg', line 478, column 17 to line 481, column 5)",
  " (in 'survreg', line 478, column 4 to line 481, column 5)",
  " (in 'survreg', line 477, column 25 to line 482, column 3)",
  " (in 'survreg', line 477, column 8 to line 514, column 3)",
  " (in 'survreg', line 474, column 10 to column 51)",
  " (in 'survreg', line 475, column 10 to column 53)",
  " (in 'survreg', line 473, column 17 to line 476, column 5)",
  " (in 'survreg', line 473, column 4 to line 476, column 5)",
  " (in 'survreg', line 472, column 25 to line 477, column 3)",
  " (in 'survreg', line 472, column 8 to line 514, column 3)",
  " (in 'survreg', line 469, column 6 to column 54)",
  " (in 'survreg', line 470, column 6 to column 56)",
  " (in 'survreg', line 468, column 17 to line 471, column 5)",
  " (in 'survreg', line 468, column 4 to line 471, column 5)",
  " (in 'survreg', line 467, column 25 to line 472, column 3)",
  " (in 'survreg', line 467, column 8 to line 514, column 3)",
  " (in 'survreg', line 464, column 6 to column 59)",
  " (in 'survreg', line 465, column 6 to column 61)",
  " (in 'survreg', line 463, column 17 to line 466, column 5)",
  " (in 'survreg', line 463, column 4 to line 466, column 5)",
  " (in 'survreg', line 462, column 25 to line 467, column 3)",
  " (in 'survreg', line 462, column 8 to line 514, column 3)",
  " (in 'survreg', line 459, column 6 to column 47)",
  " (in 'survreg', line 460, column 6 to column 49)",
  " (in 'survreg', line 458, column 17 to line 461, column 5)",
  " (in 'survreg', line 458, column 4 to line 461, column 5)",
  " (in 'survreg', line 457, column 25 to line 462, column 3)",
  " (in 'survreg', line 457, column 8 to line 514, column 3)",
  " (in 'survreg', line 454, column 10 to column 52)",
  " (in 'survreg', line 455, column 10 to column 54)",
  " (in 'survreg', line 453, column 17 to line 456, column 5)",
  " (in 'survreg', line 453, column 4 to line 456, column 5)",
  " (in 'survreg', line 452, column 25 to line 457, column 3)",
  " (in 'survreg', line 452, column 8 to line 514, column 3)",
  " (in 'survreg', line 449, column 6 to column 46)",
  " (in 'survreg', line 450, column 6 to column 48)",
  " (in 'survreg', line 448, column 17 to line 451, column 5)",
  " (in 'survreg', line 448, column 4 to line 451, column 5)",
  " (in 'survreg', line 447, column 19 to line 452, column 3)",
  " (in 'survreg', line 447, column 2 to line 514, column 3)",
  " (in 'survreg', line 529, column 6 to column 58)",
  " (in 'survreg', line 528, column 9 to line 530, column 5)",
  " (in 'survreg', line 527, column 6 to column 62)",
  " (in 'survreg', line 526, column 26 to line 528, column 5)",
  " (in 'survreg', line 526, column 10 to line 530, column 5)",
  " (in 'survreg', line 525, column 6 to column 54)",
  " (in 'survreg', line 524, column 26 to line 526, column 5)",
  " (in 'survreg', line 524, column 10 to line 530, column 5)",
  " (in 'survreg', line 523, column 6 to column 54)",
  " (in 'survreg', line 522, column 26 to line 524, column 5)",
  " (in 'survreg', line 522, column 10 to line 530, column 5)",
  " (in 'survreg', line 521, column 6 to column 54)",
  " (in 'survreg', line 520, column 26 to line 522, column 5)",
  " (in 'survreg', line 520, column 10 to line 530, column 5)",
  " (in 'survreg', line 519, column 6 to column 55)",
  " (in 'survreg', line 518, column 21 to line 520, column 5)",
  " (in 'survreg', line 518, column 4 to line 530, column 5)",
  " (in 'survreg', line 517, column 7 to line 531, column 3)",
  " (in 'survreg', line 516, column 4 to column 48)",
  " (in 'survreg', line 515, column 12 to line 517, column 3)",
  " (in 'survreg', line 515, column 2 to line 531, column 3)",
  " (in 'survreg', line 533, column 4 to column 40)",
  " (in 'survreg', line 532, column 31 to line 534, column 3)",
  " (in 'survreg', line 532, column 2 to line 534, column 3)",
  " (in 'survreg', line 535, column 2 to column 24)",
  " (in 'survreg', line 312, column 2 to column 8)",
  " (in 'survreg', line 313, column 2 to column 8)",
  " (in 'survreg', line 314, column 2 to column 8)",
  " (in 'survreg', line 315, column 9 to column 10)",
  " (in 'survreg', line 315, column 2 to column 17)",
  " (in 'survreg', line 316, column 9 to column 10)",
  " (in 'survreg', line 316, column 2 to column 18)",
  " (in 'survreg', line 317, column 9 to column 23)",
  " (in 'survreg', line 317, column 25 to column 26)",
  " (in 'survreg', line 317, column 2 to column 30)",
  " (in 'survreg', line 318, column 9 to column 10)",
  " (in 'survreg', line 318, column 2 to column 19)",
  " (in 'survreg', line 319, column 2 to column 11)",
  " (in 'survreg', line 320, column 2 to column 15)",
  " (in 'survreg', line 321, column 2 to column 14)",
  " (in 'survreg', line 322, column 9 to column 33)",
  " (in 'survreg', line 322, column 2 to column 39)",
  " (in 'survreg', line 325, column 2 to column 19)",
  " (in 'survreg', line 326, column 2 to column 19)",
  " (in 'survreg', line 327, column 2 to column 19)",
  " (in 'survreg', line 328, column 2 to column 20)",
  " (in 'survreg', line 329, column 2 to column 16)",
  " (in 'survreg', line 330, column 2 to column 19)",
  " (in 'survreg', line 331, column 2 to column 20)",
  " (in 'survreg', line 332, column 2 to column 17)",
  " (in 'survreg', line 333, column 2 to column 16)",
  " (in 'survreg', line 334, column 9 to column 23)",
  " (in 'survreg', line 334, column 2 to column 31)",
  " (in 'survreg', line 335, column 9 to column 31)",
  " (in 'survreg', line 335, column 33 to column 34)",
  " (in 'survreg', line 335, column 2 to column 38)",
  " (in 'survreg', line 336, column 9 to column 31)",
  " (in 'survreg', line 336, column 33 to column 34)",
  " (in 'survreg', line 336, column 2 to column 38)",
  " (in 'survreg', line 337, column 10 to column 32)",
  " (in 'survreg', line 337, column 2 to column 34)",
  " (in 'survreg', line 338, column 9 to column 31)",
  " (in 'survreg', line 338, column 33 to column 34)",
  " (in 'survreg', line 338, column 2 to column 40)",
  " (in 'survreg', line 339, column 2 to column 21)",
  " (in 'survreg', line 341, column 4 to column 19)",
  " (in 'survreg', line 340, column 50 to line 342, column 3)",
  " (in 'survreg', line 340, column 2 to line 342, column 3)",
  " (in 'survreg', line 345, column 6 to column 19)",
  " (in 'survreg', line 344, column 17 to line 346, column 5)",
  " (in 'survreg', line 344, column 4 to line 346, column 5)",
  " (in 'survreg', line 343, column 10 to line 347, column 3)",
  " (in 'survreg', line 343, column 2 to line 347, column 3)",
  " (in 'survreg', line 387, column 4 to column 14)",
  " (in 'survreg', line 388, column 4 to column 25)",
  " (in 'survreg', line 389, column 4 to column 25)",
  " (in 'survreg', line 386, column 26 to line 390, column 3)",
  " (in 'survreg', line 386, column 8 to line 390, column 3)",
  " (in 'survreg', line 379, column 4 to column 14)",
  " (in 'survreg', line 382, column 8 to column 91)",
  " (in 'survreg', line 383, column 8 to column 98)",
  " (in 'survreg', line 381, column 19 to line 384, column 7)",
  " (in 'survreg', line 381, column 6 to line 384, column 7)",
  " (in 'survreg', line 380, column 17 to line 385, column 5)",
  " (in 'survreg', line 380, column 4 to line 385, column 5)",
  " (in 'survreg', line 378, column 26 to line 386, column 3)",
  " (in 'survreg', line 378, column 8 to line 390, column 3)",
  " (in 'survreg', line 375, column 4 to column 14)",
  " (in 'survreg', line 376, column 4 to column 17)",
  " (in 'survreg', line 377, column 4 to column 18)",
  " (in 'survreg', line 374, column 26 to line 378, column 3)",
  " (in 'survreg', line 374, column 8 to line 390, column 3)",
  " (in 'survreg', line 371, column 4 to column 17)",
  " (in 'survreg', line 372, column 4 to column 17)",
  " (in 'survreg', line 373, column 4 to column 17)",
  " (in 'survreg', line 370, column 25 to line 374, column 3)",
  " (in 'survreg', line 370, column 8 to line 390, column 3)",
  " (in 'survreg', line 368, column 4 to column 17)",
  " (in 'survreg', line 369, column 4 to column 17)",
  " (in 'survreg', line 367, column 25 to line 370, column 3)",
  " (in 'survreg', line 367, column 8 to line 390, column 3)",
  " (in 'survreg', line 366, column 4 to column 17)",
  " (in 'survreg', line 365, column 25 to line 367, column 3)",
  " (in 'survreg', line 365, column 8 to line 390, column 3)",
  " (in 'survreg', line 363, column 4 to column 17)",
  " (in 'survreg', line 364, column 4 to column 18)",
  " (in 'survreg', line 362, column 25 to line 365, column 3)",
  " (in 'survreg', line 362, column 8 to line 390, column 3)",
  " (in 'survreg', line 360, column 4 to column 17)",
  " (in 'survreg', line 361, column 4 to column 17)",
  " (in 'survreg', line 359, column 25 to line 362, column 3)",
  " (in 'survreg', line 359, column 8 to line 390, column 3)",
  " (in 'survreg', line 357, column 4 to column 17)",
  " (in 'survreg', line 358, column 4 to column 17)",
  " (in 'survreg', line 356, column 25 to line 359, column 3)",
  " (in 'survreg', line 356, column 8 to line 390, column 3)",
  " (in 'survreg', line 354, column 4 to column 14)",
  " (in 'survreg', line 355, column 4 to column 17)",
  " (in 'survreg', line 353, column 25 to line 356, column 3)",
  " (in 'survreg', line 353, column 8 to line 390, column 3)",
  " (in 'survreg', line 351, column 4 to column 17)",
  " (in 'survreg', line 352, column 4 to column 17)",
  " (in 'survreg', line 350, column 25 to line 353, column 3)",
  " (in 'survreg', line 350, column 8 to line 390, column 3)",
  " (in 'survreg', line 349, column 4 to column 18)",
  " (in 'survreg', line 348, column 19 to line 350, column 3)",
  " (in 'survreg', line 348, column 2 to line 390, column 3)",
  " (in 'survreg', line 393, column 4 to column 15)",
  " (in 'survreg', line 392, column 18 to line 394, column 3)",
  " (in 'survreg', line 392, column 2 to line 394, column 3)",
  " (in 'survreg', line 397, column 9 to column 23)",
  " (in 'survreg', line 398, column 9 to column 28)",
  " (in 'survreg', line 399, column 8 to column 29)",
  " (in 'survreg', line 400, column 8 to column 29)",
  " (in 'survreg', line 401, column 8 to column 30)",
  " (in 'survreg', line 402, column 8 to column 30)",
  " (in 'survreg', line 403, column 8 to column 26)",
  " (in 'survreg', line 404, column 8 to column 30)",
  " (in 'survreg', line 405, column 8 to column 31)",
  " (in 'survreg', line 406, column 18 to column 36)",
  " (in 'survreg', line 9, column 2 to column 40)",
  " (in 'survreg', line 10, column 2 to line 11, column 36)",
  " (in 'survreg', line 12, column 2 to column 14)",
  " (in 'survreg', line 8, column 54 to line 13, column 1)",
  " (in 'survreg', line 16, column 2 to column 44)",
  " (in 'survreg', line 17, column 2 to column 15)",
  " (in 'survreg', line 15, column 55 to line 18, column 1)",
  " (in 'survreg', line 24, column 2 to column 26)",
  " (in 'survreg', line 25, column 2 to column 26)",
  " (in 'survreg', line 28, column 2 to column 27)",
  " (in 'survreg', line 29, column 2 to column 80)",
  " (in 'survreg', line 30, column 2 to column 14)",
  " (in 'survreg', line 23, column 49 to line 31, column 1)",
  " (in 'survreg', line 34, column 2 to column 26)",
  " (in 'survreg', line 35, column 2 to column 26)",
  " (in 'survreg', line 38, column 2 to column 29)",
  " (in 'survreg', line 39, column 2 to column 30)",
  " (in 'survreg', line 33, column 50 to line 40, column 1)",
  " (in 'survreg', line 46, column 2 to column 64)",
  " (in 'survreg', line 47, column 2 to column 14)",
  " (in 'survreg', line 45, column 50 to line 48, column 1)",
  " (in 'survreg', line 51, column 2 to column 44)",
  " (in 'survreg', line 52, column 2 to column 15)",
  " (in 'survreg', line 50, column 51 to line 53, column 1)",
  " (in 'survreg', line 59, column 2 to column 12)",
  " (in 'survreg', line 60, column 2 to line 61, column 59)",
  " (in 'survreg', line 62, column 2 to column 15)",
  " (in 'survreg', line 58, column 64 to line 63, column 1)",
  " (in 'survreg', line 66, column 2 to column 13)",
  " (in 'survreg', line 67, column 2 to column 34)",
  " (in 'survreg', line 68, column 2 to column 27)",
  " (in 'survreg', line 69, column 2 to column 34)",
  " (in 'survreg', line 70, column 2 to column 16)",
  " (in 'survreg', line 65, column 65 to line 71, column 1)",
  " (in 'survreg', line 78, column 2 to column 16)",
  " (in 'survreg', line 79, column 2 to column 9)",
  " (in 'survreg', line 80, column 2 to column 13)",
  " (in 'survreg', line 81, column 2 to column 10)",
  " (in 'survreg', line 82, column 2 to column 10)",
  " (in 'survreg', line 90, column 4 to column 40)",
  " (in 'survreg', line 89, column 7 to line 91, column 3)",
  " (in 'survreg', line 84, column 4 to column 30)",
  " (in 'survreg', line 85, column 4 to column 24)",
  " (in 'survreg', line 86, column 4 to column 25)",
  " (in 'survreg', line 87, column 4 to column 20)",
  " (in 'survreg', line 88, column 4 to column 94)",
  " (in 'survreg', line 83, column 17 to line 89, column 3)",
  " (in 'survreg', line 83, column 2 to line 91, column 3)",
  " (in 'survreg', line 93, column 2 to column 15)",
  " (in 'survreg', line 77, column 62 to line 94, column 1)",
  " (in 'survreg', line 98, column 2 to column 13)",
  " (in 'survreg', line 99, column 2 to column 9)",
  " (in 'survreg', line 100, column 2 to column 10)",
  " (in 'survreg', line 101, column 2 to column 11)",
  " (in 'survreg', line 112, column 4 to column 41)",
  " (in 'survreg', line 111, column 7 to line 113, column 3)",
  " (in 'survreg', line 103, column 4 to column 28)",
  " (in 'survreg', line 104, column 4 to column 25)",
  " (in 'survreg', line 105, column 4 to column 27)",
  " (in 'survreg', line 109, column 6 to column 36)",
  " (in 'survreg', line 108, column 22 to line 110, column 5)",
  " (in 'survreg', line 108, column 8 to line 110, column 5)",
  " (in 'survreg', line 107, column 4 to column 35)",
  " (in 'survreg', line 106, column 18 to line 108, column 3)",
  " (in 'survreg', line 106, column 4 to line 110, column 5)",
  " (in 'survreg', line 102, column 17 to line 111, column 3)",
  " (in 'survreg', line 102, column 2 to line 113, column 3)",
  " (in 'survreg', line 114, column 2 to column 16)",
  " (in 'survreg', line 97, column 63 to line 115, column 1)",
  " (in 'survreg', line 123, column 2 to column 15)",
  " (in 'survreg', line 127, column 4 to column 34)",
  " (in 'survreg', line 126, column 7 to line 128, column 3)",
  " (in 'survreg', line 125, column 4 to column 28)",
  " (in 'survreg', line 124, column 42 to line 126, column 3)",
  " (in 'survreg', line 124, column 2 to line 128, column 3)",
  " (in 'survreg', line 129, column 2 to column 13)",
  " (in 'survreg', line 122, column 37 to line 130, column 1)",
  " (in 'survreg', line 167, column 2 to column 27)",
  " (in 'survreg', line 168, column 2 to column 12)",
  " (in 'survreg', line 169, column 13 to column 14)",
  " (in 'survreg', line 169, column 2 to column 18)",
  " (in 'survreg', line 170, column 13 to column 14)",
  " (in 'survreg', line 170, column 2 to column 18)",
  " (in 'survreg', line 172, column 4 to column 37)",
  " (in 'survreg', line 173, column 4 to column 47)",
  " (in 'survreg', line 171, column 15 to line 174, column 3)",
  " (in 'survreg', line 171, column 2 to line 174, column 3)",
  " (in 'survreg', line 175, column 2 to column 26)",
  " (in 'survreg', line 176, column 2 to column 15)",
  " (in 'survreg', line 166, column 38 to line 177, column 1)",
  " (in 'survreg', line 180, column 2 to column 27)",
  " (in 'survreg', line 181, column 13 to column 14)",
  " (in 'survreg', line 181, column 2 to column 18)",
  " (in 'survreg', line 183, column 4 to column 47)",
  " (in 'survreg', line 182, column 15 to line 184, column 3)",
  " (in 'survreg', line 182, column 2 to line 184, column 3)",
  " (in 'survreg', line 185, column 2 to column 16)",
  " (in 'survreg', line 179, column 39 to line 186, column 1)",
  " (in 'survreg', line 189, column 2 to column 26)",
  " (in 'survreg', line 188, column 53 to line 190, column 1)",
  " (in 'survreg', line 193, column 2 to column 15)",
  " (in 'survreg', line 192, column 44 to line 194, column 1)",
  " (in 'survreg', line 201, column 2 to column 29)",
  " (in 'survreg', line 202, column 2 to column 32)",
  " (in 'survreg', line 203, column 2 to column 16)",
  " (in 'survreg', line 204, column 9 to column 10)",
  " (in 'survreg', line 204, column 12 to column 13)",
  " (in 'survreg', line 204, column 2 to column 19)",
  " (in 'survreg', line 207, column 8 to column 25)",
  " (in 'survreg', line 208, column 8 to column 26)",
  " (in 'survreg', line 209, column 8 to column 63)",
  " (in 'survreg', line 206, column 19 to line 210, column 7)",
  " (in 'survreg', line 206, column 6 to line 210, column 7)",
  " (in 'survreg', line 205, column 15 to line 211, column 3)",
  " (in 'survreg', line 205, column 2 to line 211, column 3)",
  " (in 'survreg', line 212, column 2 to column 14)",
  " (in 'survreg', line 200, column 36 to line 213, column 1)",
  " (in 'survreg', line 217, column 2 to column 29)",
  " (in 'survreg', line 218, column 2 to column 8)",
  " (in 'survreg', line 219, column 10 to column 11)",
  " (in 'survreg', line 219, column 2 to column 13)",
  " (in 'survreg', line 221, column 6 to column 12)",
  " (in 'survreg', line 223, column 8 to column 18)",
  " (in 'survreg', line 222, column 31 to line 224, column 7)",
  " (in 'survreg', line 222, column 6 to line 224, column 7)",
  " (in 'survreg', line 225, column 6 to column 17)",
  " (in 'survreg', line 220, column 17 to line 226, column 3)",
  " (in 'survreg', line 220, column 4 to line 226, column 3)",
  " (in 'survreg', line 227, column 2 to column 14)",
  " (in 'survreg', line 216, column 34 to line 228, column 1)",
  " (in 'survreg', line 232, column 2 to column 31)",
  " (in 'survreg', line 231, column 56 to line 233, column 1)",
  " (in 'survreg', line 236, column 2 to column 17)",
  " (in 'survreg', line 235, column 46 to line 237, column 1)",
  " (in 'survreg', line 243, column 2 to column 29)",
  " (in 'survreg', line 244, column 9 to column 10)",
  " (in 'survreg', line 244, column 2 to column 19)",
  " (in 'survreg', line 245, column 2 to column 65)",
  " (in 'survreg', line 246, column 2 to column 16)",
  " (in 'survreg', line 242, column 79 to line 247, column 1)",
  " (in 'survreg', line 251, column 2 to column 29)",
  " (in 'survreg', line 252, column 9 to column 10)",
  " (in 'survreg', line 252, column 2 to column 19)",
  " (in 'survreg', line 254, column 2 to column 68)",
  " (in 'survreg', line 255, column 2 to column 16)",
  " (in 'survreg', line 250, column 78 to line 256, column 1)",
  " (in 'survreg', line 260, column 2 to column 29)",
  " (in 'survreg', line 261, column 9 to column 10)",
  " (in 'survreg', line 261, column 2 to column 19)",
  " (in 'survreg', line 262, column 9 to column 10)",
  " (in 'survreg', line 262, column 2 to column 31)",
  " (in 'survreg', line 263, column 2 to column 64)",
  " (in 'survreg', line 264, column 2 to column 16)",
  " (in 'survreg', line 259, column 78 to line 265, column 1)",
  " (in 'survreg', line 269, column 2 to column 29)",
  " (in 'survreg', line 270, column 9 to column 10)",
  " (in 'survreg', line 270, column 2 to column 31)",
  " (in 'survreg', line 271, column 9 to column 10)",
  " (in 'survreg', line 271, column 2 to column 25)",
  " (in 'survreg', line 272, column 9 to column 10)",
  " (in 'survreg', line 272, column 2 to column 39)",
  " (in 'survreg', line 273, column 9 to column 10)",
  " (in 'survreg', line 273, column 2 to column 83)",
  " (in 'survreg', line 274, column 2 to column 16)",
  " (in 'survreg', line 268, column 78 to line 275, column 1)",
  " (in 'survreg', line 280, column 2 to column 29)",
  " (in 'survreg', line 281, column 9 to column 10)",
  " (in 'survreg', line 281, column 2 to column 16)",
  " (in 'survreg', line 282, column 9 to column 10)",
  " (in 'survreg', line 282, column 2 to column 19)",
  " (in 'survreg', line 283, column 9 to column 10)",
  " (in 'survreg', line 283, column 2 to column 19)",
  " (in 'survreg', line 284, column 9 to column 10)",
  " (in 'survreg', line 284, column 2 to column 19)",
  " (in 'survreg', line 285, column 9 to column 10)",
  " (in 'survreg', line 285, column 2 to column 18)",
  " (in 'survreg', line 286, column 9 to column 10)",
  " (in 'survreg', line 286, column 2 to column 16)",
  " (in 'survreg', line 287, column 9 to column 10)",
  " (in 'survreg', line 287, column 2 to column 43)",
  " (in 'survreg', line 288, column 9 to column 10)",
  " (in 'survreg', line 288, column 2 to column 25)",
  " (in 'survreg', line 290, column 2 to column 19)",
  " (in 'survreg', line 291, column 2 to column 23)",
  " (in 'survreg', line 293, column 2 to column 17)",
  " (in 'survreg', line 294, column 2 to column 46)",
  " (in 'survreg', line 295, column 2 to column 32)",
  " (in 'survreg', line 296, column 2 to column 37)",
  " (in 'survreg', line 298, column 2 to column 16)",
  " (in 'survreg', line 278, column 111 to line 299, column 1)",
  " (in 'survreg', line 304, column 2 to column 29)",
  " (in 'survreg', line 305, column 9 to column 10)",
  " (in 'survreg', line 305, column 2 to column 19)",
  " (in 'survreg', line 306, column 2 to column 65)",
  " (in 'survreg', line 308, column 2 to column 16)",
  " (in 'survreg', line 302, column 89 to line 309, column 1)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic2_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
                  std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic2_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
                   std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
fatigue_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
             std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
fatigue_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
               std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggstacy_lpdf(const T0__& time, const T1__& alpha, const T2__& gamma,
             const T3__& kappa, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggstacy_lccdf(const T0__& time, const T1__& alpha, const T2__& gamma,
              const T3__& kappa, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggprentice_lpdf(const T0__& x, const T1__& mu, const T2__& sigma, const T3__&
                varphi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggprentice_lccdf(const T0__& x, const T1__& mu, const T2__& sigma,
                 const T3__& varphi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
beta_pdf(const T0__& x, const T1__& a, const T2__& b, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>>
bernstein_lpdf(const T0__& y, const T1__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>>
bernstein_lccdf(const T0__& y, const T1__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
bernstein_vlpdf(const T0__& g_arg__, const T1__& G_arg__, const T2__&
                xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
bernstein_vlccdf(const T0__& G_arg__, const T1__& xi_arg__, std::ostream*
                 pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
TTT(const T0__& time_arg__, const T1__& rho_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
std::vector<int>
IDT(const T0__& time_arg__, const T1__& rho_arg__, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
piecewise_vlpdf(const T0__& ttt_arg__, const std::vector<int>& idt,
                const T2__& xi_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
piecewise_vlccdf(const T0__& ttt_arg__, const T1__& xi_arg__, std::ostream*
                 pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_aft(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
           event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
           pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_ah(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_ph(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_po(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>, T6__>>,-1,1>
loglik_yp(const T0__& status_arg__, const T1__& lpdf_arg__, const T2__&
          lsurv_arg__, const T3__& lp_short_arg__, const T4__& lp_long_arg__,
          const T5__& K_arg__, const T6__& tau, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<T5__>>,-1,1>
loglik_eh(const T0__& status_arg__, const T1__& lpdf_arg__, const T2__&
          lsurv_arg__, const T3__& lp_arg__, const T4__& K_arg__, const T5__&
          tau, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic2_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ aux = DUMMY_VAR__;
    current_statement__ = 279;
    aux = stan::math::log1p(stan::math::pow((x / gamma), alpha));
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 280;
    lpdf = ((((stan::math::log(alpha) - stan::math::log(gamma)) +
      stan::math::multiply_log((alpha - 1), x)) -
      stan::math::multiply_log((alpha - 1), gamma)) - (2 * aux));
    current_statement__ = 281;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
loglogistic2_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lsurv = DUMMY_VAR__;
    current_statement__ = 283;
    lsurv = -stan::math::log1p(stan::math::pow((x / gamma), alpha));
    current_statement__ = 284;
    return lsurv;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
fatigue_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ xg = DUMMY_VAR__;
    current_statement__ = 286;
    xg = stan::math::sqrt((x / gamma));
    local_scalar_t__ gx = DUMMY_VAR__;
    current_statement__ = 287;
    gx = stan::math::sqrt((gamma / x));
    local_scalar_t__ z = DUMMY_VAR__;
    current_statement__ = 288;
    z = ((xg - gx) / alpha);
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 289;
    lpdf = ((((stan::math::log((xg + gx)) - stan::math::log2()) -
      stan::math::log(alpha)) - stan::math::log(x)) +
      stan::math::normal_lpdf<false>(z, 0, 1));
    current_statement__ = 290;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
fatigue_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ xg = DUMMY_VAR__;
    current_statement__ = 292;
    xg = stan::math::sqrt((x / gamma));
    local_scalar_t__ gx = DUMMY_VAR__;
    current_statement__ = 293;
    gx = stan::math::sqrt((gamma / x));
    local_scalar_t__ z = DUMMY_VAR__;
    current_statement__ = 294;
    z = ((xg - gx) / alpha);
    current_statement__ = 295;
    return stan::math::normal_lcdf(-z, 0, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lpdf(const T0__& x, const T1__& alpha, const T2__& gamma,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 297;
    lpdf = ((stan::math::log(alpha) + (gamma * x)) - ((alpha *
      stan::math::expm1((gamma * x))) / gamma));
    current_statement__ = 298;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
gompertz_lccdf(const T0__& x, const T1__& alpha, const T2__& gamma,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lsurv = DUMMY_VAR__;
    current_statement__ = 300;
    lsurv = ((-alpha * stan::math::expm1((gamma * x))) / gamma);
    current_statement__ = 301;
    return lsurv;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggstacy_lpdf(const T0__& time, const T1__& alpha, const T2__& gamma,
             const T3__& kappa, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 304;
    lpdf = ((((stan::math::log(kappa) -
      stan::math::multiply_log(alpha, gamma)) -
      stan::math::lgamma((alpha / kappa))) +
      stan::math::multiply_log((alpha - 1), time)) -
      stan::math::pow((time / gamma), kappa));
    current_statement__ = 305;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggstacy_lccdf(const T0__& time, const T1__& alpha, const T2__& gamma,
              const T3__& kappa, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lccdf = DUMMY_VAR__;
    local_scalar_t__ x = DUMMY_VAR__;
    current_statement__ = 308;
    x = stan::math::pow((time / gamma), kappa);
    local_scalar_t__ shape = DUMMY_VAR__;
    current_statement__ = 309;
    shape = (alpha / kappa);
    current_statement__ = 310;
    lccdf = stan::math::gamma_lccdf(x, shape, 1);
    current_statement__ = 311;
    return lccdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggprentice_lpdf(const T0__& x, const T1__& mu, const T2__& sigma, const T3__&
                varphi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 313;
    lpdf = 0;
    local_scalar_t__ w = DUMMY_VAR__;
    local_scalar_t__ abs_q = DUMMY_VAR__;
    local_scalar_t__ q2 = DUMMY_VAR__;
    local_scalar_t__ qw = DUMMY_VAR__;
    current_statement__ = 326;
    if (stan::math::logical_neq(varphi, 0)) {
      current_statement__ = 320;
      w = ((stan::math::log(x) - mu) / sigma);
      current_statement__ = 321;
      abs_q = stan::math::abs(varphi);
      current_statement__ = 322;
      q2 = stan::math::pow(varphi, -2);
      current_statement__ = 323;
      qw = (varphi * w);
      current_statement__ = 324;
      lpdf = (lpdf + (((-stan::math::log((sigma * x)) +
        stan::math::multiply_log((1 - (2 * q2)), abs_q)) + (q2 * (qw -
        stan::math::exp(qw)))) - stan::math::lgamma(q2)));
    } else {
      current_statement__ = 318;
      lpdf = (lpdf + stan::math::lognormal_lpdf<false>(x, mu, sigma));
    }
    current_statement__ = 327;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggprentice_lccdf(const T0__& x, const T1__& mu, const T2__& sigma,
                 const T3__& varphi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lccdf = DUMMY_VAR__;
    local_scalar_t__ w = DUMMY_VAR__;
    local_scalar_t__ q2 = DUMMY_VAR__;
    local_scalar_t__ aux = DUMMY_VAR__;
    current_statement__ = 345;
    if (stan::math::logical_neq(varphi, 0)) {
      current_statement__ = 335;
      w = ((stan::math::log(x) - mu) / sigma);
      current_statement__ = 336;
      q2 = stan::math::pow(varphi, -2);
      current_statement__ = 337;
      aux = (q2 * stan::math::exp((varphi * w)));
      current_statement__ = 343;
      if (stan::math::logical_gt(varphi, 0)) {
        current_statement__ = 341;
        lccdf = stan::math::gamma_lccdf(aux, q2, 1);
      } else {
        current_statement__ = 340;
        if (stan::math::logical_lt(varphi, 0)) {
          current_statement__ = 338;
          lccdf = stan::math::gamma_lcdf(aux, q2, 1);
        }
      }
    } else {
      current_statement__ = 333;
      lccdf = stan::math::lognormal_lccdf(x, mu, sigma);
    }
    current_statement__ = 346;
    return lccdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
beta_pdf(const T0__& x, const T1__& a, const T2__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ pdf = DUMMY_VAR__;
    current_statement__ = 348;
    pdf = 0;
    current_statement__ = 353;
    if ((stan::math::primitive_value(
           (stan::math::primitive_value(stan::math::logical_eq(x, 0)) &&
           stan::math::primitive_value(stan::math::logical_eq(a, 1))))
        ||
        stan::math::primitive_value(
          (stan::math::primitive_value(stan::math::logical_eq(x, 1)) &&
          stan::math::primitive_value(stan::math::logical_eq(b, 1)))))) {
      current_statement__ = 351;
      pdf = stan::math::exp(-stan::math::lbeta(a, b));
    } else {
      current_statement__ = 349;
      pdf = stan::math::exp(stan::math::beta_lpdf<false>(x, a, b));
    }
    current_statement__ = 354;
    return pdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>>
bernstein_lpdf(const T0__& y, const T1__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xi = stan::math::to_ref(xi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int m = std::numeric_limits<int>::min();
    current_statement__ = 356;
    m = stan::math::num_elements(xi);
    local_scalar_t__ lpdf = DUMMY_VAR__;
    current_statement__ = 358;
    stan::math::validate_non_negative_index("g", "m", m);
    Eigen::Matrix<local_scalar_t__,1,-1> g =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 360;
    stan::math::validate_non_negative_index("G", "m", m);
    Eigen::Matrix<local_scalar_t__,1,-1> G =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 365;
    for (int j = 1; j <= m; ++j) {
      current_statement__ = 362;
      stan::model::assign(g,
        beta_pdf(y, static_cast<double>(j),
          static_cast<double>(((m - j) + 1)), pstream__),
        "assigning variable g", stan::model::index_uni(j));
      current_statement__ = 363;
      stan::model::assign(G,
        stan::math::exp(stan::math::beta_lcdf(y, j, ((m - j) + 1))),
        "assigning variable G", stan::model::index_uni(j));
    }
    current_statement__ = 366;
    lpdf = (stan::math::log(stan::math::multiply(g, xi)) -
      stan::math::multiply(G, xi));
    current_statement__ = 367;
    return lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>>
bernstein_lccdf(const T0__& y, const T1__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int m = std::numeric_limits<int>::min();
    current_statement__ = 369;
    m = stan::math::num_elements(xi);
    current_statement__ = 370;
    stan::math::validate_non_negative_index("G", "m", m);
    Eigen::Matrix<local_scalar_t__,1,-1> G =
      Eigen::Matrix<local_scalar_t__,1,-1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 374;
    for (int j = 1; j <= m; ++j) {
      current_statement__ = 372;
      stan::model::assign(G,
        stan::math::exp(stan::math::beta_lcdf(y, j, ((m - j) + 1))),
        "assigning variable G", stan::model::index_uni(j));
    }
    current_statement__ = 375;
    return stan::math::multiply(stan::math::minus(G), xi);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
bernstein_vlpdf(const T0__& g_arg__, const T1__& G_arg__, const T2__&
                xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& g = stan::math::to_ref(g_arg__);
  const auto& G = stan::math::to_ref(G_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 377;
    return stan::math::subtract(stan::math::log(stan::math::multiply(g, xi)),
             stan::math::multiply(G, xi));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
bernstein_vlccdf(const T0__& G_arg__, const T1__& xi_arg__, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& G = stan::math::to_ref(G_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 379;
    return stan::math::multiply(stan::math::minus(G), xi);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
TTT(const T0__& time_arg__, const T1__& rho_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& rho = stan::math::to_ref(rho_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 381;
    n = stan::math::num_elements(time);
    int m = std::numeric_limits<int>::min();
    current_statement__ = 382;
    m = (stan::math::num_elements(rho) - 1);
    Eigen::Matrix<local_scalar_t__,-1,1> aux =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
    current_statement__ = 384;
    stan::math::validate_non_negative_index("ttt", "n", n);
    current_statement__ = 385;
    stan::math::validate_non_negative_index("ttt", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,-1> ttt =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, m, DUMMY_VAR__);
    current_statement__ = 393;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 391;
      for (int j = 1; j <= m; ++j) {
        current_statement__ = 387;
        stan::model::assign(aux,
          stan::model::rvalue(time, "time", stan::model::index_uni(i)),
          "assigning variable aux", stan::model::index_uni(1));
        current_statement__ = 388;
        stan::model::assign(aux,
          stan::model::rvalue(rho, "rho", stan::model::index_uni((j + 1))),
          "assigning variable aux", stan::model::index_uni(2));
        current_statement__ = 389;
        stan::model::assign(ttt, ((stan::math::min(aux) -
          stan::model::rvalue(rho, "rho", stan::model::index_uni(j))) *
          stan::math::logical_gt(
            (stan::model::rvalue(time, "time", stan::model::index_uni(i)) -
            stan::model::rvalue(rho, "rho", stan::model::index_uni(j))), 0)),
          "assigning variable ttt", stan::model::index_uni(i),
          stan::model::index_uni(j));
      }
    }
    current_statement__ = 394;
    return ttt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
std::vector<int>
IDT(const T0__& time_arg__, const T1__& rho_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& time = stan::math::to_ref(time_arg__);
  const auto& rho = stan::math::to_ref(rho_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 396;
    n = stan::math::num_elements(time);
    int j = std::numeric_limits<int>::min();
    current_statement__ = 398;
    stan::math::validate_non_negative_index("idt", "n", n);
    std::vector<int> idt =
      std::vector<int>(n, std::numeric_limits<int>::min());
    current_statement__ = 406;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 400;
      j = 0;
      current_statement__ = 403;
      while (stan::math::logical_gt(
               stan::model::rvalue(time, "time", stan::model::index_uni(i)),
               stan::model::rvalue(rho, "rho",
                 stan::model::index_uni((j + 1))))) {
        current_statement__ = 401;
        j = (j + 1);
      }
      current_statement__ = 404;
      stan::model::assign(idt, j, "assigning variable idt",
        stan::model::index_uni(i));
    }
    current_statement__ = 407;
    return idt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
piecewise_vlpdf(const T0__& ttt_arg__, const std::vector<int>& idt,
                const T2__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& ttt = stan::math::to_ref(ttt_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 409;
    return stan::math::subtract(
             stan::math::log(
               stan::model::rvalue(xi, "xi", stan::model::index_multi(idt))),
             stan::math::multiply(ttt, xi));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
piecewise_vlccdf(const T0__& ttt_arg__, const T1__& xi_arg__, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& ttt = stan::math::to_ref(ttt_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 411;
    return stan::math::multiply(stan::math::minus(ttt), xi);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_aft(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
           event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& event = stan::math::to_ref(event_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 413;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 414;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 416;
    stan::model::assign(loglik,
      stan::math::add(
        stan::math::elt_multiply(event,
          stan::math::subtract(stan::math::subtract(lpdf, lp),
            stan::math::log(tau))),
        stan::math::elt_multiply(stan::math::subtract(1, event), lsurv)),
      "assigning variable loglik");
    current_statement__ = 417;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_ah(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& event = stan::math::to_ref(event_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 419;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 420;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 422;
    stan::model::assign(loglik,
      stan::math::add(
        stan::math::elt_multiply(event,
          stan::math::subtract(stan::math::subtract(lpdf, lsurv),
            stan::math::log(tau))),
        stan::math::elt_multiply(stan::math::exp(lp), lsurv)),
      "assigning variable loglik");
    current_statement__ = 423;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_ph(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& event = stan::math::to_ref(event_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 425;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 426;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 428;
    stan::math::validate_non_negative_index("lht", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lht =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 429;
    stan::model::assign(lht, stan::math::subtract(lpdf, lsurv),
      "assigning variable lht");
    current_statement__ = 430;
    stan::model::assign(loglik,
      stan::math::add(
        stan::math::elt_multiply(event,
          stan::math::subtract(stan::math::add(lht, lp), stan::math::log(tau))),
        stan::math::elt_multiply(stan::math::exp(lp), lsurv)),
      "assigning variable loglik");
    current_statement__ = 431;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__>,-1,1>
loglik_po(const T0__& lpdf_arg__, const T1__& lsurv_arg__, const T2__&
          event_arg__, const T3__& lp_arg__, const T4__& tau, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& event = stan::math::to_ref(event_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 433;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 434;
    stan::math::validate_non_negative_index("lht", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lht =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 435;
    stan::model::assign(lht, stan::math::subtract(lpdf, lsurv),
      "assigning variable lht");
    current_statement__ = 436;
    stan::math::validate_non_negative_index("Ht", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> Ht =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 437;
    stan::model::assign(Ht, stan::math::minus(lsurv), "assigning variable Ht");
    current_statement__ = 438;
    stan::math::validate_non_negative_index("aux", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> aux =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 439;
    stan::model::assign(aux,
      stan::math::elt_multiply(stan::math::exp(lp), stan::math::expm1(Ht)),
      "assigning variable aux");
    current_statement__ = 440;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 441;
    stan::model::assign(loglik,
      stan::math::subtract(
        stan::math::elt_multiply(event,
          stan::math::subtract(stan::math::add(stan::math::add(lht, lp), Ht),
            stan::math::log(tau))),
        stan::math::elt_multiply(stan::math::add(1, event),
          stan::math::log1p(aux))), "assigning variable loglik");
    current_statement__ = 442;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>, T6__>>,-1,1>
loglik_yp(const T0__& status_arg__, const T1__& lpdf_arg__, const T2__&
          lsurv_arg__, const T3__& lp_short_arg__, const T4__& lp_long_arg__,
          const T5__& K_arg__, const T6__& tau, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>,
                               T6__>>;
  int current_statement__ = 0;
  const auto& status = stan::math::to_ref(status_arg__);
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& lp_short = stan::math::to_ref(lp_short_arg__);
  const auto& lp_long = stan::math::to_ref(lp_long_arg__);
  const auto& K = stan::math::to_ref(K_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 444;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 445;
    stan::math::validate_non_negative_index("Rt0", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> Rt0 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 447;
    stan::math::validate_non_negative_index("log_ht", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> log_ht =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 449;
    stan::math::validate_non_negative_index("log_St", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> log_St =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 451;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 453;
    stan::math::validate_non_negative_index("theta", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> theta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 455;
    stan::math::validate_non_negative_index("aux", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> aux =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 457;
    stan::math::validate_non_negative_index("lht0", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lht0 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 458;
    stan::model::assign(lht0,
      stan::math::subtract(stan::math::subtract(lpdf, lsurv),
        stan::math::log(tau)), "assigning variable lht0");
    current_statement__ = 459;
    stan::math::validate_non_negative_index("Ht0", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> Ht0 =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 460;
    stan::model::assign(Ht0, stan::math::minus(lsurv),
      "assigning variable Ht0");
    current_statement__ = 461;
    stan::model::assign(Rt0, stan::math::expm1(Ht0), "assigning variable Rt0");
    current_statement__ = 462;
    stan::model::assign(theta, stan::math::exp(lp_long),
      "assigning variable theta");
    current_statement__ = 463;
    stan::model::assign(aux, stan::math::elt_multiply(K, Rt0),
      "assigning variable aux");
    current_statement__ = 464;
    stan::model::assign(log_ht,
      stan::math::add(
        stan::math::add(
          stan::math::subtract(lp_short, stan::math::log1p(aux)), lht0), Ht0),
      "assigning variable log_ht");
    current_statement__ = 465;
    stan::model::assign(log_St,
      stan::math::elt_multiply(stan::math::minus(theta),
        stan::math::log1p(aux)), "assigning variable log_St");
    current_statement__ = 466;
    stan::model::assign(loglik,
      stan::math::add(stan::math::elt_multiply(status, log_ht), log_St),
      "assigning variable loglik");
    current_statement__ = 467;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<T5__>>,-1,1>
loglik_eh(const T0__& status_arg__, const T1__& lpdf_arg__, const T2__&
          lsurv_arg__, const T3__& lp_arg__, const T4__& K_arg__, const T5__&
          tau, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  const auto& status = stan::math::to_ref(status_arg__);
  const auto& lpdf = stan::math::to_ref(lpdf_arg__);
  const auto& lsurv = stan::math::to_ref(lsurv_arg__);
  const auto& lp = stan::math::to_ref(lp_arg__);
  const auto& K = stan::math::to_ref(K_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 469;
    n = stan::math::num_elements(lpdf);
    current_statement__ = 470;
    stan::math::validate_non_negative_index("loglik", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> loglik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 472;
    stan::model::assign(loglik,
      stan::math::add(
        stan::math::elt_multiply(status,
          stan::math::subtract(
            stan::math::subtract(stan::math::add(lp, lpdf), lsurv),
            stan::math::log(tau))), stan::math::elt_multiply(lsurv, K)),
      "assigning variable loglik");
    current_statement__ = 473;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_survreg final : public model_base_crtp<model_survreg> {
private:
  int n;
  int p;
  int m;
  Eigen::Matrix<double,-1,1> time_data__;
  Eigen::Matrix<double,-1,1> event_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,1> offset_data__;
  double tau;
  int baseline;
  int survreg;
  Eigen::Matrix<double,-1,1> rho_data__;
  int is_alpha;
  int is_gamma;
  int is_kappa;
  int is_lambda;
  int is_mu;
  int is_sigma;
  int is_varphi;
  int is_phi;
  int is_xi;
  Eigen::Matrix<double,-1,1> zeros_data__;
  Eigen::Matrix<double,-1,-1> g_data__;
  Eigen::Matrix<double,-1,-1> G_data__;
  std::vector<int> idt;
  Eigen::Matrix<double,-1,-1> ttt_data__;
  int survreg146;
  int beta_1dim__;
  int phi_1dim__;
  int alpha_1dim__;
  int gamma_1dim__;
  int kappa_1dim__;
  int lambda_1dim__;
  int mu_1dim__;
  int sigma_1dim__;
  int varphi_1dim__;
  int xi_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> event{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rho{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> zeros{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> g{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> G{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ttt{nullptr, 0, 0};
public:
  ~model_survreg() {}
  model_survreg(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_survreg_namespace::model_survreg";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 164;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 164;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 165;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 165;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 166;
      context__.validate_dims("data initialization", "m", "int",
        std::vector<size_t>{});
      m = std::numeric_limits<int>::min();
      current_statement__ = 166;
      m = context__.vals_i("m")[(1 - 1)];
      current_statement__ = 167;
      stan::math::validate_non_negative_index("time", "n", n);
      current_statement__ = 168;
      context__.validate_dims("data initialization", "time", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      time_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                      std::numeric_limits<double>::quiet_NaN());
      new (&time) Eigen::Map<Eigen::Matrix<double,-1,1>>(time_data__.data(),
        n);
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 168;
        time_flat__ = context__.vals_r("time");
        current_statement__ = 168;
        pos__ = 1;
        current_statement__ = 168;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 168;
          stan::model::assign(time, time_flat__[(pos__ - 1)],
            "assigning variable time", stan::model::index_uni(sym1__));
          current_statement__ = 168;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 169;
      stan::math::validate_non_negative_index("event", "n", n);
      current_statement__ = 170;
      context__.validate_dims("data initialization", "event", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      event_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                       std::numeric_limits<double>::quiet_NaN());
      new (&event)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(event_data__.data(), n);
      {
        std::vector<local_scalar_t__> event_flat__;
        current_statement__ = 170;
        event_flat__ = context__.vals_r("event");
        current_statement__ = 170;
        pos__ = 1;
        current_statement__ = 170;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 170;
          stan::model::assign(event, event_flat__[(pos__ - 1)],
            "assigning variable event", stan::model::index_uni(sym1__));
          current_statement__ = 170;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 171;
      stan::math::validate_non_negative_index("X", "p == 0 ? 0 : n",
        (stan::math::logical_eq(p, 0) ? 0 : n));
      current_statement__ = 172;
      stan::math::validate_non_negative_index("X", "p", p);
      current_statement__ = 173;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(p, 0) ? 0 : n)),
          static_cast<size_t>(p)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant((stan::math::logical_eq(
                                                          p, 0) ? 0 : n), p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(),
        (stan::math::logical_eq(p, 0) ? 0 : n), p);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 173;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 173;
        pos__ = 1;
        current_statement__ = 173;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 173;
          for (int sym2__ = 1; sym2__ <=
               (stan::math::logical_eq(p, 0) ? 0 : n); ++sym2__) {
            current_statement__ = 173;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 173;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 174;
      stan::math::validate_non_negative_index("offset", "n", n);
      current_statement__ = 175;
      context__.validate_dims("data initialization", "offset", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      offset_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                        std::numeric_limits<double>::quiet_NaN());
      new (&offset)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_data__.data(), n);
      {
        std::vector<local_scalar_t__> offset_flat__;
        current_statement__ = 175;
        offset_flat__ = context__.vals_r("offset");
        current_statement__ = 175;
        pos__ = 1;
        current_statement__ = 175;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 175;
          stan::model::assign(offset, offset_flat__[(pos__ - 1)],
            "assigning variable offset", stan::model::index_uni(sym1__));
          current_statement__ = 175;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 176;
      context__.validate_dims("data initialization", "tau", "double",
        std::vector<size_t>{});
      tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 176;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 177;
      context__.validate_dims("data initialization", "baseline", "int",
        std::vector<size_t>{});
      baseline = std::numeric_limits<int>::min();
      current_statement__ = 177;
      baseline = context__.vals_i("baseline")[(1 - 1)];
      current_statement__ = 178;
      context__.validate_dims("data initialization", "survreg", "int",
        std::vector<size_t>{});
      survreg = std::numeric_limits<int>::min();
      current_statement__ = 178;
      survreg = context__.vals_i("survreg")[(1 - 1)];
      current_statement__ = 179;
      stan::math::validate_non_negative_index("rho",
        "baseline == 12 ? m + 1 : 0",
        (stan::math::logical_eq(baseline, 12) ? (m + 1) : 0));
      current_statement__ = 180;
      context__.validate_dims("data initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(baseline, 12) ? (m +
                              1) : 0))});
      rho_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                           baseline, 12) ? (m
                     + 1) : 0), std::numeric_limits<double>::quiet_NaN());
      new (&rho) Eigen::Map<Eigen::Matrix<double,-1,1>>(rho_data__.data(),
        (stan::math::logical_eq(baseline, 12) ? (m + 1) : 0));
      {
        std::vector<local_scalar_t__> rho_flat__;
        current_statement__ = 180;
        rho_flat__ = context__.vals_r("rho");
        current_statement__ = 180;
        pos__ = 1;
        current_statement__ = 180;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(baseline, 12) ? (m + 1) : 0); ++sym1__) {
          current_statement__ = 180;
          stan::model::assign(rho, rho_flat__[(pos__ - 1)],
            "assigning variable rho", stan::model::index_uni(sym1__));
          current_statement__ = 180;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 181;
      is_alpha = std::numeric_limits<int>::min();
      current_statement__ = 181;
      is_alpha = 0;
      current_statement__ = 182;
      is_gamma = std::numeric_limits<int>::min();
      current_statement__ = 182;
      is_gamma = 0;
      current_statement__ = 183;
      is_kappa = std::numeric_limits<int>::min();
      current_statement__ = 183;
      is_kappa = 0;
      current_statement__ = 184;
      is_lambda = std::numeric_limits<int>::min();
      current_statement__ = 184;
      is_lambda = 0;
      current_statement__ = 185;
      is_mu = std::numeric_limits<int>::min();
      current_statement__ = 185;
      is_mu = 0;
      current_statement__ = 186;
      is_sigma = std::numeric_limits<int>::min();
      current_statement__ = 186;
      is_sigma = 0;
      current_statement__ = 187;
      is_varphi = std::numeric_limits<int>::min();
      current_statement__ = 187;
      is_varphi = 0;
      current_statement__ = 188;
      is_phi = std::numeric_limits<int>::min();
      current_statement__ = 188;
      is_phi = 0;
      current_statement__ = 189;
      is_xi = std::numeric_limits<int>::min();
      current_statement__ = 189;
      is_xi = 0;
      current_statement__ = 190;
      stan::math::validate_non_negative_index("zeros", "p == 0 ? n : 0",
        (stan::math::logical_eq(p, 0) ? n : 0));
      current_statement__ = 191;
      zeros_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                             p, 0) ? n : 0),
                       std::numeric_limits<double>::quiet_NaN());
      new (&zeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(zeros_data__.data(),
        (stan::math::logical_eq(p, 0) ? n : 0));
      current_statement__ = 192;
      stan::math::validate_non_negative_index("g", "baseline == 11 ? n : 0",
        (stan::math::logical_eq(baseline, 11) ? n : 0));
      current_statement__ = 193;
      stan::math::validate_non_negative_index("g", "m", m);
      current_statement__ = 194;
      g_data__ = Eigen::Matrix<double,-1,-1>::Constant((stan::math::logical_eq(
                                                          baseline, 11) ? n : 0),
                   m, std::numeric_limits<double>::quiet_NaN());
      new (&g) Eigen::Map<Eigen::Matrix<double,-1,-1>>(g_data__.data(),
        (stan::math::logical_eq(baseline, 11) ? n : 0), m);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("G", "baseline == 11 ? n : 0",
        (stan::math::logical_eq(baseline, 11) ? n : 0));
      current_statement__ = 196;
      stan::math::validate_non_negative_index("G", "m", m);
      current_statement__ = 197;
      G_data__ = Eigen::Matrix<double,-1,-1>::Constant((stan::math::logical_eq(
                                                          baseline, 11) ? n : 0),
                   m, std::numeric_limits<double>::quiet_NaN());
      new (&G) Eigen::Map<Eigen::Matrix<double,-1,-1>>(G_data__.data(),
        (stan::math::logical_eq(baseline, 11) ? n : 0), m);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("idt",
        "baseline == 12 ? n : 0",
        (stan::math::logical_eq(baseline, 12) ? n : 0));
      current_statement__ = 199;
      idt = std::vector<int>((stan::math::logical_eq(baseline, 12) ? n : 0),
              std::numeric_limits<int>::min());
      current_statement__ = 200;
      stan::math::validate_non_negative_index("ttt",
        "baseline == 12 ? n : 0",
        (stan::math::logical_eq(baseline, 12) ? n : 0));
      current_statement__ = 201;
      stan::math::validate_non_negative_index("ttt", "m", m);
      current_statement__ = 202;
      ttt_data__ = Eigen::Matrix<double,-1,-1>::Constant((stan::math::logical_eq(
                                                            baseline, 12) ? n : 0),
                     m, std::numeric_limits<double>::quiet_NaN());
      new (&ttt) Eigen::Map<Eigen::Matrix<double,-1,-1>>(ttt_data__.data(),
        (stan::math::logical_eq(baseline, 12) ? n : 0), m);
      current_statement__ = 203;
      survreg146 = std::numeric_limits<int>::min();
      current_statement__ = 203;
      survreg146 = 0;
      current_statement__ = 206;
      if ((stan::math::primitive_value(
             (stan::math::primitive_value(stan::math::logical_eq(survreg, 1))
             ||
             stan::math::primitive_value(stan::math::logical_eq(survreg, 4))))
          || stan::math::primitive_value(stan::math::logical_eq(survreg, 6)))) {
        current_statement__ = 204;
        survreg146 = 1;
      }
      current_statement__ = 211;
      if (stan::math::logical_eq(p, 0)) {
        current_statement__ = 209;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 207;
          stan::model::assign(zeros, 0, "assigning variable zeros",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 265;
      if (stan::math::logical_eq(baseline, 1)) {
        current_statement__ = 263;
        is_lambda = 1;
      } else {
        current_statement__ = 262;
        if (stan::math::logical_eq(baseline, 2)) {
          current_statement__ = 259;
          is_alpha = 1;
          current_statement__ = 260;
          is_gamma = 1;
        } else {
          current_statement__ = 258;
          if (stan::math::logical_eq(baseline, 3)) {
            current_statement__ = 255;
            is_mu = 1;
            current_statement__ = 256;
            is_sigma = 1;
          } else {
            current_statement__ = 254;
            if (stan::math::logical_eq(baseline, 4)) {
              current_statement__ = 251;
              is_alpha = 1;
              current_statement__ = 252;
              is_gamma = 1;
            } else {
              current_statement__ = 250;
              if (stan::math::logical_eq(baseline, 5)) {
                current_statement__ = 247;
                is_alpha = 1;
                current_statement__ = 248;
                is_gamma = 1;
              } else {
                current_statement__ = 246;
                if (stan::math::logical_eq(baseline, 6)) {
                  current_statement__ = 243;
                  is_alpha = 1;
                  current_statement__ = 244;
                  is_lambda = 1;
                } else {
                  current_statement__ = 242;
                  if (stan::math::logical_eq(baseline, 7)) {
                    current_statement__ = 240;
                    is_sigma = 1;
                  } else {
                    current_statement__ = 239;
                    if (stan::math::logical_eq(baseline, 8)) {
                      current_statement__ = 236;
                      is_alpha = 1;
                      current_statement__ = 237;
                      is_gamma = 1;
                    } else {
                      current_statement__ = 235;
                      if (stan::math::logical_eq(baseline, 9)) {
                        current_statement__ = 231;
                        is_alpha = 1;
                        current_statement__ = 232;
                        is_gamma = 1;
                        current_statement__ = 233;
                        is_kappa = 1;
                      } else {
                        current_statement__ = 230;
                        if (stan::math::logical_eq(baseline, 10)) {
                          current_statement__ = 226;
                          is_mu = 1;
                          current_statement__ = 227;
                          is_sigma = 1;
                          current_statement__ = 228;
                          is_varphi = 1;
                        } else {
                          current_statement__ = 225;
                          if (stan::math::logical_eq(baseline, 11)) {
                            current_statement__ = 217;
                            is_xi = 1;
                            current_statement__ = 223;
                            for (int i = 1; i <= n; ++i) {
                              current_statement__ = 221;
                              for (int j = 1; j <= m; ++j) {
                                current_statement__ = 218;
                                stan::model::assign(g,
                                  beta_pdf(
                                    (stan::model::rvalue(time, "time",
                                       stan::model::index_uni(i)) /
                                    (stan::math::max(time) * (1 +
                                    stan::math::machine_precision()))),
                                    static_cast<double>(j),
                                    static_cast<double>(((m - j) + 1)),
                                    pstream__), "assigning variable g",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(j));
                                current_statement__ = 219;
                                stan::model::assign(G,
                                  stan::math::exp(
                                    stan::math::beta_lcdf(
                                      (stan::model::rvalue(time, "time",
                                         stan::model::index_uni(i)) /
                                      (stan::math::max(time) * (1 +
                                      stan::math::machine_precision()))), j,
                                      ((m - j) + 1))),
                                  "assigning variable G",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(j));
                              }
                            }
                          } else {
                            current_statement__ = 216;
                            if (stan::math::logical_eq(baseline, 12)) {
                              current_statement__ = 212;
                              is_xi = 1;
                              current_statement__ = 213;
                              stan::model::assign(idt,
                                IDT(time, rho, pstream__),
                                "assigning variable idt");
                              current_statement__ = 214;
                              stan::model::assign(ttt,
                                TTT(time, rho, pstream__),
                                "assigning variable ttt");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 268;
      if (stan::math::logical_gt(survreg, 4)) {
        current_statement__ = 266;
        is_phi = 1;
      }
      current_statement__ = 269;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 269;
      beta_1dim__ = (stan::math::logical_eq(p, 0) ? 0 : p);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("beta", "p == 0 ? 0 : p",
        beta_1dim__);
      current_statement__ = 270;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 270;
      phi_1dim__ = (stan::math::logical_eq(is_phi, 0) ? 0 : p);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("phi", "is_phi == 0 ? 0 : p",
        phi_1dim__);
      current_statement__ = 271;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 271;
      alpha_1dim__ = (stan::math::logical_eq(is_alpha, 0) ? 0 : 1);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("alpha",
        "is_alpha == 0 ? 0 : 1", alpha_1dim__);
      current_statement__ = 272;
      gamma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 272;
      gamma_1dim__ = (stan::math::logical_eq(is_gamma, 0) ? 0 : 1);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("gamma",
        "is_gamma == 0 ? 0 : 1", gamma_1dim__);
      current_statement__ = 273;
      kappa_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 273;
      kappa_1dim__ = (stan::math::logical_eq(is_kappa, 0) ? 0 : 1);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("kappa",
        "is_kappa == 0 ? 0 : 1", kappa_1dim__);
      current_statement__ = 274;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 274;
      lambda_1dim__ = (stan::math::logical_eq(is_lambda, 0) ? 0 : 1);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("lambda",
        "is_lambda == 0 ? 0 : 1", lambda_1dim__);
      current_statement__ = 275;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 275;
      mu_1dim__ = (stan::math::logical_eq(is_mu, 0) ? 0 : 1);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("mu", "is_mu == 0 ? 0 : 1",
        mu_1dim__);
      current_statement__ = 276;
      sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 276;
      sigma_1dim__ = (stan::math::logical_eq(is_sigma, 0) ? 0 : 1);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("sigma",
        "is_sigma == 0 ? 0 : 1", sigma_1dim__);
      current_statement__ = 277;
      varphi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 277;
      varphi_1dim__ = (stan::math::logical_eq(is_varphi, 0) ? 0 : 1);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("varphi",
        "is_varphi == 0 ? 0 : 1", varphi_1dim__);
      current_statement__ = 278;
      xi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 278;
      xi_1dim__ = (stan::math::logical_eq(is_xi, 0) ? 0 : m);
      current_statement__ = 278;
      stan::math::validate_non_negative_index("xi", "is_xi == 0 ? 0 : m",
        xi_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = beta_1dim__ + phi_1dim__ + alpha_1dim__ + gamma_1dim__ +
      kappa_1dim__ + lambda_1dim__ + mu_1dim__ + sigma_1dim__ + varphi_1dim__
      + xi_1dim__;
  }
  inline std::string model_name() const final {
    return "model_survreg";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_survreg_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(phi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      phi = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(phi_1dim__);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, gamma_1dim__);
      std::vector<local_scalar_t__> kappa =
        std::vector<local_scalar_t__>(kappa_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      kappa = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, kappa_1dim__);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, lambda_1dim__);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<local_scalar_t__> varphi =
        std::vector<local_scalar_t__>(varphi_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      varphi = in__.template read<
                 std::vector<local_scalar_t__>>(varphi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(xi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      xi = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             xi_1dim__);
      {
        current_statement__ = 11;
        stan::math::validate_non_negative_index("lp", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 13;
        stan::math::validate_non_negative_index("y", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> y =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("loglik", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> loglik =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("lpdf", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lpdf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 19;
        stan::math::validate_non_negative_index("lsurv", "n", n);
        Eigen::Matrix<local_scalar_t__,-1,1> lsurv =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
        current_statement__ = 21;
        stan::math::validate_non_negative_index("lp2", "survreg > 4 ? n : 0",
          (stan::math::logical_gt(survreg, 4) ? n : 0));
        Eigen::Matrix<local_scalar_t__,-1,1> lp2 =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::logical_gt(
                                                            survreg, 4) ? n : 0),
            DUMMY_VAR__);
        current_statement__ = 23;
        stan::math::validate_non_negative_index("K", "survreg > 4 ? n : 0",
          (stan::math::logical_gt(survreg, 4) ? n : 0));
        Eigen::Matrix<local_scalar_t__,-1,1> K =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::logical_gt(
                                                            survreg, 4) ? n : 0),
            DUMMY_VAR__);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("g2",
          "survreg146 * baseline == 11 ? n : 0",
          (stan::math::logical_eq((survreg146 * baseline), 11) ? n : 0));
        current_statement__ = 26;
        stan::math::validate_non_negative_index("g2", "m", m);
        Eigen::Matrix<local_scalar_t__,-1,-1> g2 =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::logical_eq(
                                                             (survreg146 *
                                                             baseline), 11) ? n : 0),
            m, DUMMY_VAR__);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("G2",
          "survreg146 * baseline == 11 ? n : 0",
          (stan::math::logical_eq((survreg146 * baseline), 11) ? n : 0));
        current_statement__ = 29;
        stan::math::validate_non_negative_index("G2", "m", m);
        Eigen::Matrix<local_scalar_t__,-1,-1> G2 =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::logical_eq(
                                                             (survreg146 *
                                                             baseline), 11) ? n : 0),
            m, DUMMY_VAR__);
        local_scalar_t__ Tau = DUMMY_VAR__;
        current_statement__ = 49;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 38;
          stan::model::assign(lp,
            stan::math::add(stan::math::multiply(X, beta), offset),
            "assigning variable lp");
          current_statement__ = 47;
          if (stan::math::logical_gt(survreg, 4)) {
            current_statement__ = 45;
            if (stan::math::logical_eq(survreg, 5)) {
              current_statement__ = 42;
              stan::model::assign(lp2,
                stan::math::add(stan::math::multiply(X, phi), offset),
                "assigning variable lp2");
              current_statement__ = 43;
              stan::model::assign(K,
                stan::math::exp(
                  stan::math::multiply(X, stan::math::subtract(beta, phi))),
                "assigning variable K");
            } else {
              current_statement__ = 39;
              stan::model::assign(lp2,
                stan::math::add(stan::math::multiply(X, phi), offset),
                "assigning variable lp2");
              current_statement__ = 40;
              stan::model::assign(K,
                stan::math::exp(stan::math::add(lp, lp2)),
                "assigning variable K");
            }
          }
        } else {
          current_statement__ = 32;
          stan::model::assign(lp, stan::math::add(zeros, offset),
            "assigning variable lp");
          current_statement__ = 36;
          if (stan::math::logical_gt(survreg, 4)) {
            current_statement__ = 33;
            stan::model::assign(lp2, stan::math::add(zeros, offset),
              "assigning variable lp2");
            current_statement__ = 34;
            stan::model::assign(K, stan::math::exp(zeros),
              "assigning variable K");
          }
        }
        current_statement__ = 54;
        if ((stan::math::primitive_value(
               (stan::math::primitive_value(
                  stan::math::logical_eq(survreg, 2)) ||
               stan::math::primitive_value(stan::math::logical_eq(survreg, 3))))
            ||
            stan::math::primitive_value(stan::math::logical_eq(survreg, 5)))) {
          current_statement__ = 52;
          stan::model::assign(y, time, "assigning variable y");
        } else {
          current_statement__ = 50;
          stan::model::assign(y,
            stan::math::elt_divide(time, stan::math::exp(lp)),
            "assigning variable y");
        }
        current_statement__ = 59;
        if (stan::math::logical_eq((survreg146 * baseline), 11)) {
          current_statement__ = 57;
          Tau = (stan::math::max(y) * (1 + stan::math::machine_precision()));
        } else {
          current_statement__ = 55;
          Tau = tau;
        }
        current_statement__ = 138;
        if (stan::math::logical_eq(baseline, 1)) {
          current_statement__ = 136;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 133;
            stan::model::assign(lpdf,
              stan::math::exponential_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                lambda), "assigning variable lpdf", stan::model::index_uni(i));
            current_statement__ = 134;
            stan::model::assign(lsurv,
              stan::math::exponential_lccdf(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                lambda), "assigning variable lsurv",
              stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 132;
          if (stan::math::logical_eq(baseline, 2)) {
            current_statement__ = 130;
            for (int i = 1; i <= n; ++i) {
              current_statement__ = 127;
              stan::model::assign(lpdf,
                stan::math::weibull_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  alpha, gamma), "assigning variable lpdf",
                stan::model::index_uni(i));
              current_statement__ = 128;
              stan::model::assign(lsurv,
                stan::math::weibull_lccdf(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  alpha, gamma), "assigning variable lsurv",
                stan::model::index_uni(i));
            }
          } else {
            current_statement__ = 126;
            if (stan::math::logical_eq(baseline, 3)) {
              current_statement__ = 124;
              for (int i = 1; i <= n; ++i) {
                current_statement__ = 121;
                stan::model::assign(lpdf,
                  stan::math::lognormal_lpdf<false>(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    mu, sigma), "assigning variable lpdf",
                  stan::model::index_uni(i));
                current_statement__ = 122;
                stan::model::assign(lsurv,
                  stan::math::lognormal_lccdf(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    mu, sigma), "assigning variable lsurv",
                  stan::model::index_uni(i));
              }
            } else {
              current_statement__ = 120;
              if (stan::math::logical_eq(baseline, 4)) {
                current_statement__ = 118;
                for (int i = 1; i <= n; ++i) {
                  current_statement__ = 115;
                  stan::model::assign(lpdf,
                    loglogistic2_lpdf<false>(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(alpha, "alpha",
                        stan::model::index_uni(1)),
                      stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(1)), pstream__),
                    "assigning variable lpdf", stan::model::index_uni(i));
                  current_statement__ = 116;
                  stan::model::assign(lsurv,
                    loglogistic2_lccdf(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(alpha, "alpha",
                        stan::model::index_uni(1)),
                      stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(1)), pstream__),
                    "assigning variable lsurv", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 114;
                if (stan::math::logical_eq(baseline, 5)) {
                  current_statement__ = 112;
                  for (int i = 1; i <= n; ++i) {
                    current_statement__ = 109;
                    stan::model::assign(lpdf,
                      fatigue_lpdf<false>(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(1)), pstream__),
                      "assigning variable lpdf", stan::model::index_uni(i));
                    current_statement__ = 110;
                    stan::model::assign(lsurv,
                      fatigue_lccdf(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(1)), pstream__),
                      "assigning variable lsurv", stan::model::index_uni(i));
                  }
                } else {
                  current_statement__ = 108;
                  if (stan::math::logical_eq(baseline, 6)) {
                    current_statement__ = 106;
                    for (int i = 1; i <= n; ++i) {
                      current_statement__ = 103;
                      stan::model::assign(lpdf,
                        stan::math::gamma_lpdf<false>(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), alpha, lambda),
                        "assigning variable lpdf", stan::model::index_uni(i));
                      current_statement__ = 104;
                      stan::model::assign(lsurv,
                        stan::math::gamma_lccdf(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)), alpha, lambda),
                        "assigning variable lsurv", stan::model::index_uni(i));
                    }
                  } else {
                    current_statement__ = 102;
                    if (stan::math::logical_eq(baseline, 7)) {
                      current_statement__ = 100;
                      for (int i = 1; i <= n; ++i) {
                        current_statement__ = 97;
                        stan::model::assign(lpdf,
                          stan::math::rayleigh_lpdf<false>(
                            stan::model::rvalue(y, "y",
                              stan::model::index_uni(i)), sigma),
                          "assigning variable lpdf",
                          stan::model::index_uni(i));
                        current_statement__ = 98;
                        stan::model::assign(lsurv,
                          stan::math::rayleigh_lccdf(
                            stan::model::rvalue(y, "y",
                              stan::model::index_uni(i)), sigma),
                          "assigning variable lsurv",
                          stan::model::index_uni(i));
                      }
                    } else {
                      current_statement__ = 96;
                      if (stan::math::logical_eq(baseline, 8)) {
                        current_statement__ = 94;
                        for (int i = 1; i <= n; ++i) {
                          current_statement__ = 91;
                          stan::model::assign(lpdf,
                            gompertz_lpdf<false>(
                              stan::model::rvalue(y, "y",
                                stan::model::index_uni(i)),
                              stan::model::rvalue(alpha, "alpha",
                                stan::model::index_uni(1)),
                              stan::model::rvalue(gamma, "gamma",
                                stan::model::index_uni(1)), pstream__),
                            "assigning variable lpdf",
                            stan::model::index_uni(i));
                          current_statement__ = 92;
                          stan::model::assign(lsurv,
                            gompertz_lccdf(
                              stan::model::rvalue(y, "y",
                                stan::model::index_uni(i)),
                              stan::model::rvalue(alpha, "alpha",
                                stan::model::index_uni(1)),
                              stan::model::rvalue(gamma, "gamma",
                                stan::model::index_uni(1)), pstream__),
                            "assigning variable lsurv",
                            stan::model::index_uni(i));
                        }
                      } else {
                        current_statement__ = 90;
                        if (stan::math::logical_eq(baseline, 9)) {
                          current_statement__ = 88;
                          for (int i = 1; i <= n; ++i) {
                            current_statement__ = 85;
                            stan::model::assign(lpdf,
                              ggstacy_lpdf<false>(
                                stan::model::rvalue(y, "y",
                                  stan::model::index_uni(i)),
                                stan::model::rvalue(alpha, "alpha",
                                  stan::model::index_uni(1)),
                                stan::model::rvalue(gamma, "gamma",
                                  stan::model::index_uni(1)),
                                stan::model::rvalue(kappa, "kappa",
                                  stan::model::index_uni(1)), pstream__),
                              "assigning variable lpdf",
                              stan::model::index_uni(i));
                            current_statement__ = 86;
                            stan::model::assign(lsurv,
                              ggstacy_lccdf(
                                stan::model::rvalue(y, "y",
                                  stan::model::index_uni(i)),
                                stan::model::rvalue(alpha, "alpha",
                                  stan::model::index_uni(1)),
                                stan::model::rvalue(gamma, "gamma",
                                  stan::model::index_uni(1)),
                                stan::model::rvalue(kappa, "kappa",
                                  stan::model::index_uni(1)), pstream__),
                              "assigning variable lsurv",
                              stan::model::index_uni(i));
                          }
                        } else {
                          current_statement__ = 84;
                          if (stan::math::logical_eq(baseline, 10)) {
                            current_statement__ = 82;
                            for (int i = 1; i <= n; ++i) {
                              current_statement__ = 79;
                              stan::model::assign(lpdf,
                                ggprentice_lpdf<false>(
                                  stan::model::rvalue(y, "y",
                                    stan::model::index_uni(i)),
                                  stan::model::rvalue(mu, "mu",
                                    stan::model::index_uni(1)),
                                  stan::model::rvalue(sigma, "sigma",
                                    stan::model::index_uni(1)),
                                  stan::model::rvalue(varphi, "varphi",
                                    stan::model::index_uni(1)), pstream__),
                                "assigning variable lpdf",
                                stan::model::index_uni(i));
                              current_statement__ = 80;
                              stan::model::assign(lsurv,
                                ggprentice_lccdf(
                                  stan::model::rvalue(y, "y",
                                    stan::model::index_uni(i)),
                                  stan::model::rvalue(mu, "mu",
                                    stan::model::index_uni(1)),
                                  stan::model::rvalue(sigma, "sigma",
                                    stan::model::index_uni(1)),
                                  stan::model::rvalue(varphi, "varphi",
                                    stan::model::index_uni(1)), pstream__),
                                "assigning variable lsurv",
                                stan::model::index_uni(i));
                            }
                          } else {
                            current_statement__ = 78;
                            if (stan::math::logical_eq(baseline, 11)) {
                              current_statement__ = 76;
                              if (stan::math::logical_eq(survreg146, 1)) {
                                current_statement__ = 72;
                                for (int i = 1; i <= n; ++i) {
                                  current_statement__ = 70;
                                  for (int j = 1; j <= m; ++j) {
                                    current_statement__ = 67;
                                    stan::model::assign(g2,
                                      beta_pdf(
                                        (stan::model::rvalue(y, "y",
                                           stan::model::index_uni(i)) / Tau),
                                        static_cast<double>(j),
                                        static_cast<double>(((m - j) + 1)),
                                        pstream__), "assigning variable g2",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(j));
                                    current_statement__ = 68;
                                    stan::model::assign(G2,
                                      stan::math::exp(
                                        stan::math::beta_lcdf(
                                          (stan::model::rvalue(y, "y",
                                             stan::model::index_uni(i)) /
                                          Tau), j, ((m - j) + 1))),
                                      "assigning variable G2",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(j));
                                  }
                                }
                                current_statement__ = 73;
                                stan::model::assign(lpdf,
                                  bernstein_vlpdf(g2, G2, xi, pstream__),
                                  "assigning variable lpdf");
                                current_statement__ = 74;
                                stan::model::assign(lsurv,
                                  bernstein_vlccdf(G2, xi, pstream__),
                                  "assigning variable lsurv");
                              } else {
                                current_statement__ = 64;
                                stan::model::assign(lpdf,
                                  bernstein_vlpdf(g, G, xi, pstream__),
                                  "assigning variable lpdf");
                                current_statement__ = 65;
                                stan::model::assign(lsurv,
                                  bernstein_vlccdf(G, xi, pstream__),
                                  "assigning variable lsurv");
                              }
                            } else {
                              current_statement__ = 63;
                              if (stan::math::logical_eq(baseline, 12)) {
                                current_statement__ = 60;
                                stan::model::assign(lpdf,
                                  piecewise_vlpdf(ttt, idt, xi, pstream__),
                                  "assigning variable lpdf");
                                current_statement__ = 61;
                                stan::model::assign(lsurv,
                                  piecewise_vlccdf(ttt, xi, pstream__),
                                  "assigning variable lsurv");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 159;
        if (stan::math::logical_eq(p, 0)) {
          current_statement__ = 157;
          stan::model::assign(loglik,
            stan::math::add(stan::math::elt_multiply(event, lpdf),
              stan::math::elt_multiply(stan::math::subtract(1, event), lsurv)),
            "assigning variable loglik");
        } else {
          current_statement__ = 155;
          if (stan::math::logical_eq(survreg, 1)) {
            current_statement__ = 153;
            stan::model::assign(loglik,
              loglik_aft(lpdf, lsurv, event, lp, Tau, pstream__),
              "assigning variable loglik");
          } else {
            current_statement__ = 152;
            if (stan::math::logical_eq(survreg, 2)) {
              current_statement__ = 150;
              stan::model::assign(loglik,
                loglik_ph(lpdf, lsurv, event, lp, Tau, pstream__),
                "assigning variable loglik");
            } else {
              current_statement__ = 149;
              if (stan::math::logical_eq(survreg, 3)) {
                current_statement__ = 147;
                stan::model::assign(loglik,
                  loglik_po(lpdf, lsurv, event, lp, Tau, pstream__),
                  "assigning variable loglik");
              } else {
                current_statement__ = 146;
                if (stan::math::logical_eq(survreg, 4)) {
                  current_statement__ = 144;
                  stan::model::assign(loglik,
                    loglik_ah(lpdf, lsurv, event, lp, Tau, pstream__),
                    "assigning variable loglik");
                } else {
                  current_statement__ = 143;
                  if (stan::math::logical_eq(survreg, 5)) {
                    current_statement__ = 141;
                    stan::model::assign(loglik,
                      loglik_yp(event, lpdf, lsurv, lp, lp2, K, Tau,
                        pstream__), "assigning variable loglik");
                  } else {
                    current_statement__ = 139;
                    stan::model::assign(loglik,
                      loglik_eh(event, lpdf, lsurv, lp2, K, Tau, pstream__),
                      "assigning variable loglik");
                  }
                }
              }
            }
          }
        }
        current_statement__ = 162;
        if (stan::math::logical_eq((survreg146 * baseline), 11)) {
          current_statement__ = 160;
          stan::model::assign(loglik,
            stan::math::subtract(stan::model::deep_copy(loglik),
              stan::math::elt_multiply(event, stan::math::log(tau))),
            "assigning variable loglik");
        }
        current_statement__ = 163;
        lp_accum__.add(stan::math::sum(loglik));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_survreg_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__);
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      phi = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(phi_1dim__);
      std::vector<double> alpha =
        std::vector<double>(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      std::vector<double> gamma =
        std::vector<double>(gamma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, gamma_1dim__);
      std::vector<double> kappa =
        std::vector<double>(kappa_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      kappa = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, kappa_1dim__);
      std::vector<double> lambda =
        std::vector<double>(lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, lambda_1dim__);
      std::vector<double> mu =
        std::vector<double>(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<double> sigma =
        std::vector<double>(sigma_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, sigma_1dim__);
      std::vector<double> varphi =
        std::vector<double>(varphi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      varphi = in__.template read<
                 std::vector<local_scalar_t__>>(varphi_1dim__);
      Eigen::Matrix<double,-1,1> xi =
        Eigen::Matrix<double,-1,1>::Constant(xi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      xi = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             xi_1dim__);
      out__.write(beta);
      out__.write(phi);
      out__.write(alpha);
      out__.write(gamma);
      out__.write(kappa);
      out__.write(lambda);
      out__.write(mu);
      out__.write(sigma);
      out__.write(varphi);
      out__.write(xi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(phi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(phi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(phi_1dim__),
        "assigning variable phi");
      out__.write(phi);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha,
        in__.read<std::vector<local_scalar_t__>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write_free_lb(0, alpha);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma,
        in__.read<std::vector<local_scalar_t__>>(gamma_1dim__),
        "assigning variable gamma");
      out__.write_free_lb(0, gamma);
      std::vector<local_scalar_t__> kappa =
        std::vector<local_scalar_t__>(kappa_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(kappa,
        in__.read<std::vector<local_scalar_t__>>(kappa_1dim__),
        "assigning variable kappa");
      out__.write_free_lb(0, kappa);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(lambda,
        in__.read<std::vector<local_scalar_t__>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(mu,
        in__.read<std::vector<local_scalar_t__>>(mu_1dim__),
        "assigning variable mu");
      out__.write(mu);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(sigma_1dim__),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> varphi =
        std::vector<local_scalar_t__>(varphi_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(varphi,
        in__.read<std::vector<local_scalar_t__>>(varphi_1dim__),
        "assigning variable varphi");
      out__.write(varphi);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(xi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(xi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(xi_1dim__),
        "assigning variable xi");
      out__.write_free_lb(0, xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(beta_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(gamma_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "kappa", "double",
        std::vector<size_t>{static_cast<size_t>(kappa_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(mu_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(sigma_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "varphi", "double",
        std::vector<size_t>{static_cast<size_t>(varphi_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "xi", "double",
        std::vector<size_t>{static_cast<size_t>(xi_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(phi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 2;
        phi_flat__ = context__.vals_r("phi");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(phi, phi_flat__[(pos__ - 1)],
            "assigning variable phi", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(phi);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = context__.vals_r("alpha");
      out__.write_free_lb(0, alpha);
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(gamma_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = context__.vals_r("gamma");
      out__.write_free_lb(0, gamma);
      std::vector<local_scalar_t__> kappa =
        std::vector<local_scalar_t__>(kappa_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      kappa = context__.vals_r("kappa");
      out__.write_free_lb(0, kappa);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      lambda = context__.vals_r("lambda");
      out__.write_free_lb(0, lambda);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      mu = context__.vals_r("mu");
      out__.write(mu);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> varphi =
        std::vector<local_scalar_t__>(varphi_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      varphi = context__.vals_r("varphi");
      out__.write(varphi);
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(xi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_flat__;
        current_statement__ = 10;
        xi_flat__ = context__.vals_r("xi");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(xi, xi_flat__[(pos__ - 1)],
            "assigning variable xi", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, xi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "phi", "alpha", "gamma",
                "kappa", "lambda", "mu", "sigma", "varphi", "xi"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    beta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_1dim__)},
                std::vector<size_t>{static_cast<size_t>(kappa_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_1dim__)},
                std::vector<size_t>{static_cast<size_t>(varphi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(xi_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= kappa_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "kappa" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= varphi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "varphi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "xi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= kappa_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "kappa" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= varphi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "varphi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "xi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(kappa_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"varphi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(varphi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(xi_1dim__) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gamma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(kappa_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"varphi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(varphi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(xi_1dim__) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((beta_1dim__ + phi_1dim__) +
      alpha_1dim__) + gamma_1dim__) + kappa_1dim__) + lambda_1dim__) +
      mu_1dim__) + sigma_1dim__) + varphi_1dim__) + xi_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((beta_1dim__ + phi_1dim__) +
      alpha_1dim__) + gamma_1dim__) + kappa_1dim__) + lambda_1dim__) +
      mu_1dim__) + sigma_1dim__) + varphi_1dim__) + xi_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_survreg_namespace::model_survreg;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_survreg_namespace::profiles__;
}
#endif
#endif
